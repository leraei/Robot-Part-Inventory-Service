buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE")
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'org.unbroken-dome.test-sets' version '1.2.0'

}

group 'com.kahoot'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

apply plugin: "java"
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'


repositories {
    mavenCentral()
}

configurations {
    testCompile.exclude group: 'org.mockito', module: 'mockito-all'
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/groovy')
    }
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-web:2.0.2.RELEASE')
    compile('org.springframework.boot:spring-boot-starter-actuator:2.0.2.RELEASE')

    // database
    compile('org.springframework.boot:spring-boot-starter-data-jpa:2.0.3.RELEASE')
    compile('com.h2database:h2:1.4.197')

    //Rest
    compile('com.github.fge:json-patch:1.9')


    //API Doc
    compile('io.springfox:springfox-swagger-ui:2.7.0')
    compile('io.springfox:springfox-swagger2:2.7.0')

    testCompile("org.springframework.boot:spring-boot-starter-test:2.0.3.RELEASE")
    testCompile('org.junit.jupiter:junit-jupiter-api:5.2.0')
    testCompile('org.mockito:mockito-core:2.19.0')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0')

    integrationTestCompile sourceSets.main.output
    integrationTestCompile configurations.testCompile
    integrationTestRuntime configurations.testRuntime
    integrationTestCompile configurations.compileOnly

    integrationTestCompile('io.rest-assured:spring-mock-mvc:3.0.1')
    integrationTestCompile('com.googlecode.json-simple:json-simple:1.1.1')
    integrationTestCompile('org.spockframework:spock-spring:1.1-groovy-2.4')

}

test {
    useJUnitPlatform()
    systemProperty("java.awt.headless", "true")
    jvmArgs += [
            "-Dfile.encoding=UTF-8",
            "-Duser.region=DE",
            "-Duser.language=de",
    ]
    beforeSuite { descriptor ->
        if (descriptor.className != null) {
            println " * $descriptor"
        }
    }
    testLogging { exceptionFormat "full" }
}


task integrationTest(type: Test, group: 'build') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    reports.html.enabled = false
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts'
    gradleVersion = '4.6'
}